// コンフィグファイルはコマンド「tsc --init」で作成可能
{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */
    // outDirはコンパイルされたJSファイルを出力するディレクトリを指定する
    "outDir": "./dist" /* Specify an output folder for all emitted files. */,

    // targetは変換されたJSのターゲットバージョン
    "target": "ES2022" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,

    // sourceMapをtrueにするとコンパイルされたJSファイルとおなじ場所に「.js.map」というソースマップファイルが生成される
    // ソースマップを利用することで圧縮や最適化を行なったあとのコードでも、元のTSファイルと直接関連づけてデバッグが可能になる
    // デバッグを効率化したいときや本番環境での問題解析を行いたいときに有効
    "sourceMap": true /* Create source map files for emitted JavaScript files. */,

    // declarationをtrueにするとコンパイルされたJSファイルと同じ場所に宣言ファイル(.d.ts)が生成される
    "declaration": true /* Generate .d.ts files from TypeScript and JavaScript files in your project. */,

    // declarationMapをtrueにすると生成された宣言ファイルに対してソースマップが生成される
    // ソースマップを生成することで「定義へ移動」や「定義を表示」のようなアクションを使って、対応する元のTSの該当箇所にジャンプできるようになる
    "declarationMap": true /* Create sourcemaps for d.ts files. */,

    // noEmitOnErrorをtrueにするとエラーが検出された場合に、ファイル出力が行われなくなる
    // エラーを含むコードが誤ってプロダクション環境にでデプロイされることを防ぐことができる
    "noEmitOnError": true /* Disable emitting files if any type checking errors are reported. */,

    // noEmitをtrueにするとファイルを一切行わないようにできる
    // TSを型チェック専用ツールとして使用する場合や、.jsファイルの生成をBabelのような他のツールに任せたい場合に使用する
    "noEmit": false /* Disable emitting files from a compilation. */,

    // NOTE:chapter9_8
    // ES ModulesとCommonJSの違いやimportとrequireの基礎的な考え方がわかってないので、このオプションの役割がいまいち理解できない
    // 書籍とは別で深掘りする
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,

    // allowSyntheticDefaultImportsはインポート対象のモジュールがデフォルトエクスポートを明示的に指定していない場合でも、デフォルトインポート構文を使用できるようにするためのもの
    // esModuleInteropがtrueになるとallowSyntheticDefaultImportsも自動的にtrueになる
    "allowSyntheticDefaultImports": true /* Allow 'import x from y' when a module doesn't have a default export. */,

    // strictをtrueにすると型チェックに関する個別オプションが全て有効になる
    // "strict": true /* Enable all strict type-checking options. */,

    // 関数のパラメータや戻り値を推論できない場合に暗黙的にanyにするが、noImplicitAnyをtrueにすることでエラーにすることができる
    "noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied 'any' type. */,

    // nullでないことをチェックするオプション
    // undefinedもチェック対象
    "strictNullChecks": true /* When type checking, take into account 'null' and 'undefined'. */,

    // 関数のパラメータの互換性の判定方法を変更することができる
    // true ：Aのパラメータの型 <: Bのパラメータの型
    // false：Bのパラメータの型 <: Aのパラメータの型
    "strictFunctionTypes": true /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,

    // bind、call、applyに渡す引数の型を厳格にチェックするオプション
    "strictBindCallApply": true /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */,

    // strictPropertyInitializationはクラスの各プロパティが適切に初期化されているかどうかをチェックすることができる
    "strictPropertyInitialization": true /* Check for class properties that are declared but not set in the constructor. */,

    // 関数ないでthisが暗黙的にanyになることを防ぐためのオプション
    // NOTE:trueにしても変化なし。noImplicitAnyをfalseにしても変化なし。
    "noImplicitThis": true /* Enable error reporting when 'this' is given the type 'any'. */,

    // 利用可能なAPIをTSのコンパイラに知らせるために使用される
    // libを指定しない場合はtarget(デフォルト)の設定が適用される
    // libを指定する場合はデフォルトの設定が無効になるので、必要なものをすべて明示的にリストアップして指定する必要がある
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */

    // TSのプロジェクトにJSのファイルが含まれていてもコンパイルの対象には含まれない
    // allowJsをtrueにするとJSファイルもコンパイルの対象い含まれるようになる
    // TSファイルからJSファイルをインポートすることもできるようになる
    // JSをTSに段階的に移行する際や、既存のライブラリやフレームワークと互換性を保ちながら新しいTSの機能を導入するときに有効
    "allowJs": true /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */,

    // JSファイルに対しても型チェックが行えるようになるオプション
    // ただし、TSの型注釈を直接使えないため、JSDocコメントで代替えする必要がある
    // NOTE:checkJsとallowJsをtrueにしても、とくにエラーは発生しない
    "checkJs": true /* Enable error reporting in type-checked JavaScript files. */,

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "commonjs" /* Specify what module code is generated. */,
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
    // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    // "resolveJsonModule": true,                        /* Enable importing .json files. */
    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    // "removeComments": true,                           /* Disable emitting comments. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "isolatedDeclarations": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

    /* Type Checking */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  },
  // コンパイルするファイルやディレクトリを絞り込むにはincludeオプションを指定する
  // 他の設定はcompilerOptions内に記載しているが、includeオプションはトップレベルに書く必要がある
  // ワイルドカードを使用したパターン指定も可能
  // *：0個以上の文字にマッチ
  // ?：任意の1文字にマッチ
  // **：任意の階層にネストされたすべてのディレクトリにマッチ
  // 以下の設定は「srcディレクトリ以下のあらゆる階層にあるすべての.tsファイル」がコンパイルの対象になる
  "include": ["./src/**/*.ts"],
  // excludeを使うとincludeで指定したファイルの内、コンパイルを除外したいファイルを指定することができる
  "exclude": ["src/sub/moduleA.ts"]
}
